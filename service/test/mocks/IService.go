// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	entity "github.com/nidoqueen1/article-api/entity"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// IService is an autogenerated mock type for the IService type
type IService struct {
	mock.Mock
}

// CreateArticle provides a mock function with given fields: article
func (_m *IService) CreateArticle(article *entity.Article) error {
	ret := _m.Called(article)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Article) error); ok {
		r0 = rf(article)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetArticle provides a mock function with given fields: articleID
func (_m *IService) GetArticle(articleID uint) (*entity.Article, error) {
	ret := _m.Called(articleID)

	var r0 *entity.Article
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*entity.Article, error)); ok {
		return rf(articleID)
	}
	if rf, ok := ret.Get(0).(func(uint) *entity.Article); ok {
		r0 = rf(articleID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Article)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(articleID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetArticlesByTagAndDate provides a mock function with given fields: tagName, date
func (_m *IService) GetArticlesByTagAndDate(tagName string, date time.Time) ([]*entity.Article, int64, error) {
	ret := _m.Called(tagName, date)

	var r0 []*entity.Article
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(string, time.Time) ([]*entity.Article, int64, error)); ok {
		return rf(tagName, date)
	}
	if rf, ok := ret.Get(0).(func(string, time.Time) []*entity.Article); ok {
		r0 = rf(tagName, date)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Article)
		}
	}

	if rf, ok := ret.Get(1).(func(string, time.Time) int64); ok {
		r1 = rf(tagName, date)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(string, time.Time) error); ok {
		r2 = rf(tagName, date)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewIService interface {
	mock.TestingT
	Cleanup(func())
}

// NewIService creates a new instance of IService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIService(t mockConstructorTestingTNewIService) *IService {
	mock := &IService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
